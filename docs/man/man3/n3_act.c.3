.TH "src/n3_act.c" 3 "Wed Aug 29 2018" "N3 Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/n3_act.c \- This file contains activation functions and their primitive\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <assert\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include 'n3_header\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBN3L_ABS\fP(x)   (((x) < 0) ? \-(x) : (x))"
.br
.RI "Get the absolute value of the argument passed\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBn3l_act_none\fP (double val)"
.br
.RI "Doesn't change the value passed as argument\&. "
.ti -1c
.RI "double \fBn3l_act_sigmoid\fP (double val)"
.br
.RI "Sigmoid activation function\&. "
.ti -1c
.RI "double \fBn3l_act_sigmoid_prime\fP (double val)"
.br
.RI "Sigmoid activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_tanh\fP (double val)"
.br
.RI "Tanh activation function\&. "
.ti -1c
.RI "double \fBn3l_act_tanh_prime\fP (double val)"
.br
.RI "Tanh activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_relu\fP (double val)"
.br
.RI "ReLU activation function\&. "
.ti -1c
.RI "double \fBn3l_act_relu_prime\fP (double val)"
.br
.RI "ReLU activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_identity\fP (double val)"
.br
.RI "Identity activation function\&. "
.ti -1c
.RI "double \fBn3l_act_identity_prime\fP (double val)"
.br
.RI "Identity activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_softsign\fP (double val)"
.br
.RI "SoftSign activation function\&. "
.ti -1c
.RI "double \fBn3l_act_softsign_prime\fP (double val)"
.br
.RI "SoftSign activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_leaky_relu\fP (double val)"
.br
.RI "Leaky ReLU activation function\&. "
.ti -1c
.RI "double \fBn3l_act_leaky_relu_prime\fP (double val)"
.br
.RI "Leaky ReLU activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_softplus\fP (double val)"
.br
.RI "SoftPlus activation function\&. "
.ti -1c
.RI "double \fBn3l_act_softplus_prime\fP (double val)"
.br
.RI "SoftPlus activation primitive function\&. "
.ti -1c
.RI "double \fBn3l_act_swish\fP (double val)"
.br
.RI "Swish activation function\&. "
.ti -1c
.RI "double \fBn3l_act_swish_prime\fP (double val)"
.br
.RI "Swish activation primitive function\&. "
.ti -1c
.RI "N3LAct \fBn3l_act\fP (N3LActType type)"
.br
.RI "Get the pointer to an activation function\&. "
.ti -1c
.RI "N3LAct \fBn3l_act_prime\fP (N3LActType type)"
.br
.RI "Get the pointer to an activation primitive function\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains activation functions and their primitive\&. 


.PP
\fBAuthor:\fP
.RS 4
Davide Francesco Merico 
.RE
.PP
\fBSee also:\fP
.RS 4
\fCWikipedia - Activation Function\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define N3L_ABS(x)   (((x) < 0) ? \-(x) : (x))"

.PP
Get the absolute value of the argument passed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP value 
.RE
.PP
\fBReturns:\fP
.RS 4
x if x is positive, otherwise -x\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "N3LAct n3l_act (N3LActType type)"

.PP
Get the pointer to an activation function\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP Activation function type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the function chosen\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_identity (double val)"

.PP
Identity activation function\&. \[identity(value) = value\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_identity_prime\fP, \fBn3l_act_none\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_identity_prime (double val)"

.PP
Identity activation primitive function\&. \[f'(value)=1\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_identity\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_leaky_relu (double val)"

.PP
Leaky ReLU activation function\&. \[leaky\_relu(value) = \begin{cases} 0.01value & \text{for } value < 0\\ value & \text{for } value \ge 0\end{cases}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_leaky_relu_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_leaky_relu_prime (double val)"

.PP
Leaky ReLU activation primitive function\&. \[f'(value) = \begin{cases} 0.01 & \text{for } value < 0\\ 1 & \text{for } value \ge 0\end{cases}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_leaky_relu\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_none (double val)"

.PP
Doesn't change the value passed as argument\&. Used when no activation function is needed, by default is used for input layer's neurons\&.
.PP
\[none(value) = value\].PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the same value passed as argument\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_identity\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "N3LAct n3l_act_prime (N3LActType type)"

.PP
Get the pointer to an activation primitive function\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP Activation function type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the function's primitive chosen\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_relu (double val)"

.PP
ReLU activation function\&. \[relu(value) = \begin{cases} 0 & \text{ if } value < 0 \\ value& \text{ if } value \geq 0 \end{cases}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_relu_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_relu_prime (double val)"

.PP
ReLU activation primitive function\&. \[(value)= \begin{cases} 0 & \text{ if } value < 0 \\ 1& \text{ if } value \geq 0 \end{cases}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_relu\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_sigmoid (double val)"

.PP
Sigmoid activation function\&. \[sigmoid(value) = \frac{1}{1+ e^{-value}}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_sigmoid_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_sigmoid_prime (double val)"

.PP
Sigmoid activation primitive function\&. \[f'(value)= sigmoid(value) * (1 - sigmoid(value))\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_sigmoid\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_softplus (double val)"

.PP
SoftPlus activation function\&. \[softplus(value) = \ln(1 + e^{value})\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_softplus_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_softplus_prime (double val)"

.PP
SoftPlus activation primitive function\&. \[f'(value) = \frac{1}{1+ e^{-value}}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_softplus\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_softsign (double val)"

.PP
SoftSign activation function\&. \[softsign(value)=\frac{value}{1+|value|}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_softsign_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_softsign_prime (double val)"

.PP
SoftSign activation primitive function\&. \[f'(value)=\frac{1}{(1+|value|)^2}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_softsign\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_swish (double val)"

.PP
Swish activation function\&. \[swish(value)=value * sigmoid(value)\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_swish_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_swish_prime (double val)"

.PP
Swish activation primitive function\&. \[f'(value)=swish(value) + sigmoid(value) * (1 - swish(value))\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_swish\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_tanh (double val)"

.PP
Tanh activation function\&. \[tanh(value)= \frac{e^{value}-e^{-value}}{e^{value}+e^{-value}}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_tanh_prime\fP, \fBn3l_act\fP, N3LActType 
.RE
.PP

.SS "double n3l_act_tanh_prime (double val)"

.PP
Tanh activation primitive function\&. \[f'(value) = 1 - tanh(value)^{2}\]
.PP
\fBParameters:\fP
.RS 4
\fIval\fP input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the results from the formula above\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_act_tanh\fP, \fBn3l_act_prime\fP, N3LActType 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for N3 Library from the source code\&.
