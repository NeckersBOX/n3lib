.TH "src/n3_file.c" 3 "Thu Sep 6 2018" "N3 Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/n3_file.c \- This file contains functions to import and save a network state\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'n3_header\&.h'\fP
.br
\fC#include 'n3_neuron\&.h'\fP
.br
\fC#include 'n3_layer\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "double \fB__n3l_get_weight_from_file\fP (void *data)"
.br
.RI "Internal function to read weight from file during network initialization\&. "
.ti -1c
.RI "\fBN3LNetwork\fP * \fBn3l_file_import_network\fP (char *filename)"
.br
.RI "Import the network state from a previously saved file\&. "
.ti -1c
.RI "bool \fBn3l_file_export_network\fP (\fBN3LNetwork\fP *net, char *filename)"
.br
.RI "Export the current network state to the chosen file\&. "
.ti -1c
.RI "double * \fBn3l_file_get_csv_data\fP (FILE *csv, uint64_t row_offset, uint64_t col_offset, uint64_t size, \fBN3LCSVData\fP data_parser)"
.br
.RI "Get inputs from an already opened csv file\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains functions to import and save a network state\&. 


.PP
\fBAuthor:\fP
.RS 4
Davide Francesco Merico 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "double __n3l_get_weight_from_file (void * data)"

.PP
Internal function to read weight from file during network initialization\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Pointer to an already opened file\&. (FILE type) 
.RE
.PP
\fBReturns:\fP
.RS 4
The weight read from the FILE last read position\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_file_import_network\fP 
.RE
.PP

.SS "bool n3l_file_export_network (\fBN3LNetwork\fP * net, char * filename)"

.PP
Export the current network state to the chosen file\&. 
.PP
\fBParameters:\fP
.RS 4
\fInet\fP Initialized network state\&. 
.br
\fIfilename\fP File name into write the current network state\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if correctly executed, otherwise FALSE\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_file_import_network\fP, _n3l_network, \fBn3l_network_free\fP 
.RE
.PP

.SS "double* n3l_file_get_csv_data (FILE * csv, uint64_t row_offset, uint64_t col_offset, uint64_t size, \fBN3LCSVData\fP data_parser)"

.PP
Get inputs from an already opened csv file\&. Get a single line, from the \fCcsv\fP current position\&.
.PP
\fBParameters:\fP
.RS 4
\fIcsv\fP Already opened in read mode csv file\&. 
.br
\fIrow_offset\fP If 0 read from the current position, otherwise set the position to the \fCrow_offset\fP line\&. 
.br
\fIcol_offset\fP Start column from 0 to get the first data column 
.br
\fIsize\fP Number of data to read from the \fCcol_offset\fP index 
.br
\fIdata_parser\fP A custom data parser, each data will be passed as string to this function\&. If you don't need custom parser this could be set to NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A dynamic allocated array of inputs or NULL on error\&.
.RE
.PP
\fBNote:\fP
.RS 4
The returned pointer should be free() manually\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBN3LCSVData\fP 
.RE
.PP

.SS "\fBN3LNetwork\fP* n3l_file_import_network (char * filename)"

.PP
Import the network state from a previously saved file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP Previously saved file name with \fBn3l_file_export_network()\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBN3LNetwork\fP saved if successfully read, otherwise NULL\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBn3l_file_export_network\fP, _n3l_network, \fBn3l_network_build\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for N3 Library from the source code\&.
